<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>搬砖笔记</title>
    <description></description>
    <link>fdgdfgfdg/</link>
    <atom:link href="fdgdfgfdg/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 16 Jan 2016 08:21:40 +0000</pubDate>
    <lastBuildDate>Sat, 16 Jan 2016 08:21:40 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>just for test</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;测试&lt;/h2&gt;
</description>
        <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
        <link>fdgdfgfdg/blog/2016/01/04/test/</link>
        <guid isPermaLink="true">fdgdfgfdg/blog/2016/01/04/test/</guid>
        
        <category>生活</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>博客搬迁</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;博客搬迁&lt;/h2&gt;

&lt;p&gt;近期将以往博客搬迁过来&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
        <link>fdgdfgfdg/blog/2016/01/03/init-blog/</link>
        <guid isPermaLink="true">fdgdfgfdg/blog/2016/01/03/init-blog/</guid>
        
        <category>生活</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>使用java写个简单游戏脚本（二）：JNI</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;上一次的小程序只是演示了一下如何用robot类控制鼠标键盘操作&lt;/p&gt;

  &lt;p&gt;这种方法有很大的弊端：1、不能后台运行。2、坐标代码写死，窗口甚至都不可移动。3、某些游戏会屏蔽该类
下面讲述下如何用JNI技术实现游戏内脚本后台执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jni&quot;&gt;什么是JNI&lt;/h3&gt;
&lt;p&gt;简单讲就是实现了java和其他语言的通信，下面要用到是c或c++&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=CMSZ7ybpBNF4ajNimLQfbiNAJXZS-66dLhw98oK1S6cJpwN9yMxZ-7weEuzx05nvFGY19bLXHR2AAFbdeo2C1K&quot;&gt;JNI&lt;/a&gt;自行阅读，不赘述&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另：不到万不得已不要使用JNI，一方面它需要你掌握更多的知识才可以驾驭，一方面使用了JNI你的程序就会丧失可移植性&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;jni-1&quot;&gt;为什么要用JNI&lt;/h3&gt;
&lt;p&gt;java本身无法获得windows的接口，如窗口句柄等，需要借助c或c++&lt;/p&gt;

&lt;h3 id=&quot;java&quot;&gt;java代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
public class TowerUtil {
	public static native void keyPress(int hwnd, int key);
	public static native void mouseClick(int hwnd,int x,int y);
	static{
		System.loadLibrary(&quot;towerutil&quot;);
	}
	public static void main(String[] args) {
        int hwnd=1050990;
		TowerUtil.keyPress(hwnd, 0x42); 
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意keyPress和mouseClick函数的声明，它有一个关键字native，表明这个方法使用java以外的语言实现。方法不包括实现，因为我们要用c/c++语言实现它&lt;/p&gt;

&lt;p&gt;System.loadLibrary(“towerutil”)这句代码，在静态初始化块中定义的，用来装载towerutil.dll动态链接库&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;编译生成头文件&lt;/h3&gt;
&lt;p&gt;使用命令javah:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;javah TowerUtil.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;文件内容如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/* DO NOT EDIT THIS FILE - it is machine generated */
#include &quot;jni.h&quot;
/* Header for class TowerUtil */

#ifndef _Included_TowerUtil
#define _Included_TowerUtil
#ifdef __cplusplus
extern &quot;C&quot; {
#endif
/*
 * Class:     TowerUtil
 * Method:    keyPress
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_TowerUtil_keyPress
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     TowerUtil
 * Method:    mouseClick
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_TowerUtil_mouseClick
  (JNIEnv *, jclass, jint, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;cc&quot;&gt;用c/c++实现函数体&lt;/h3&gt;
&lt;p&gt;第三部里定义了keyPress和mouseClick两个函数，接下来要用c语言实现它，注意观察上一步生成的头文件里的函数名和参数，按照其来写
如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include &quot;stdafx.h&quot;
#include &quot;jni.h&quot;
#include &quot;TowerUtil.h&quot;

BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
					 )
{
    return TRUE;
}
JNIEXPORT void JNICALL Java_TowerUtil_mouseClick
(JNIEnv *env, jobject obj, jint hwnd, jint x, jint y){
	LPARAM lparam = MAKELPARAM(x,y);
	SendMessage((HWND)hwnd, WM_LBUTTONDOWN, MK_LBUTTON, lparam);
	sleep(10);
	SendMessage((HWND)hwnd, WM_LBUTTONUP, MK_LBUTTON, lparam);
	return;
}
JNIEXPORT void JNICALL Java_TowerUtil_keyPress
  (JNIEnv *env, jobject obj, jint hwnd, jint key){
	SendMessage((HWND)hwnd,WM_KEYDOWN,key,0);
	sleep(100);
	SendMessage((HWND)hwnd,WM_KEYUP,key,0);
	return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于代码里出现的SendMessage函数:&lt;a href=&quot;http://jingyan.baidu.com/article/c45ad29cd5fb58051653e278.html&quot;&gt;SendMessage 函数参数大全&lt;/a&gt; 的
注意在开头引入jni.h和前面生成的TowerUtil.h
### 生成dll文件
下面生成前面提到的 towerutil.dll，windows可以下载MinGW进行编译:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gcc -shared TowerUtil.cpp -o towerutil.dll -I （.h头文件目录）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;java-1&quot;&gt;运行java程序&lt;/h3&gt;
&lt;p&gt;把上面生成的dll文件加入到java.library.path内&lt;/p&gt;

&lt;p&gt;main函数里写上一行：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TowerUtil.keyPress(hwnd, 0x42);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解释下， hwnd是我玩的完美国际当前的句柄值，0x42是键盘“b”的asiic值，游戏内b键打开背包
执行后可以看到游戏里的背包界面打开
大功告成！
再结合上一篇文章写到的脚本解析函数的思路，就可以写出一个略微简陋的游戏脚本执行器了
使用JNI的好处上面已提到，脚本编写好后，你可以把游戏最小化，也不影响执行
如果能够再获得游戏内属性基址，就能写出一个功能更丰富的??了&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
        <link>fdgdfgfdg/blog/2015/09/09/use-java-for-game-script/</link>
        <guid isPermaLink="true">fdgdfgfdg/blog/2015/09/09/use-java-for-game-script/</guid>
        
        <category>java</category>
        
        <category>游戏</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
